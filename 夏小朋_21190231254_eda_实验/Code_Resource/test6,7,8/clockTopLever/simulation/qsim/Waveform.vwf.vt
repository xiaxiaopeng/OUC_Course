// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2019 11:31:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    clockTopLever
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clockTopLever_vlg_sample_tst(
	ADD,
	C_RESET,
	clk_50MHZ,
	SET_MODE,
	sampler_tx
);
input  ADD;
input  C_RESET;
input  clk_50MHZ;
input  SET_MODE;
output sampler_tx;

reg sample;
time current_time;
always @(ADD or C_RESET or clk_50MHZ or SET_MODE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module clockTopLever_vlg_check_tst (
	Data_DSP,
	E_pin1,
	E_pin2,
	E_pin3,
	E_pin4,
	sampler_rx
);
input [7:0] Data_DSP;
input  E_pin1;
input  E_pin2;
input  E_pin3;
input  E_pin4;
input sampler_rx;

reg [7:0] Data_DSP_expected;
reg  E_pin1_expected;
reg  E_pin2_expected;
reg  E_pin3_expected;
reg  E_pin4_expected;

reg [7:0] Data_DSP_prev;
reg  E_pin1_prev;
reg  E_pin2_prev;
reg  E_pin3_prev;
reg  E_pin4_prev;

reg [7:0] Data_DSP_expected_prev;
reg  E_pin1_expected_prev;
reg  E_pin2_expected_prev;
reg  E_pin3_expected_prev;
reg  E_pin4_expected_prev;

reg [7:0] last_Data_DSP_exp;
reg  last_E_pin1_exp;
reg  last_E_pin2_exp;
reg  last_E_pin3_exp;
reg  last_E_pin4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Data_DSP_prev = Data_DSP;
	E_pin1_prev = E_pin1;
	E_pin2_prev = E_pin2;
	E_pin3_prev = E_pin3;
	E_pin4_prev = E_pin4;
end

// update expected /o prevs

always @(trigger)
begin
	Data_DSP_expected_prev = Data_DSP_expected;
	E_pin1_expected_prev = E_pin1_expected;
	E_pin2_expected_prev = E_pin2_expected;
	E_pin3_expected_prev = E_pin3_expected;
	E_pin4_expected_prev = E_pin4_expected;
end


// expected Data_DSP[ 7 ]
initial
begin
	Data_DSP_expected[7] = 1'bX;
end 
// expected Data_DSP[ 6 ]
initial
begin
	Data_DSP_expected[6] = 1'bX;
end 
// expected Data_DSP[ 5 ]
initial
begin
	Data_DSP_expected[5] = 1'bX;
end 
// expected Data_DSP[ 4 ]
initial
begin
	Data_DSP_expected[4] = 1'bX;
end 
// expected Data_DSP[ 3 ]
initial
begin
	Data_DSP_expected[3] = 1'bX;
end 
// expected Data_DSP[ 2 ]
initial
begin
	Data_DSP_expected[2] = 1'bX;
end 
// expected Data_DSP[ 1 ]
initial
begin
	Data_DSP_expected[1] = 1'bX;
end 
// expected Data_DSP[ 0 ]
initial
begin
	Data_DSP_expected[0] = 1'bX;
end 

// expected E_pin1
initial
begin
	E_pin1_expected = 1'bX;
end 

// expected E_pin2
initial
begin
	E_pin2_expected = 1'bX;
end 

// expected E_pin3
initial
begin
	E_pin3_expected = 1'bX;
end 

// expected E_pin4
initial
begin
	E_pin4_expected = 1'bX;
end 
// generate trigger
always @(Data_DSP_expected or Data_DSP or E_pin1_expected or E_pin1 or E_pin2_expected or E_pin2 or E_pin3_expected or E_pin3 or E_pin4_expected or E_pin4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Data_DSP = %b | expected E_pin1 = %b | expected E_pin2 = %b | expected E_pin3 = %b | expected E_pin4 = %b | ",Data_DSP_expected_prev,E_pin1_expected_prev,E_pin2_expected_prev,E_pin3_expected_prev,E_pin4_expected_prev);
	$display("| real Data_DSP = %b | real E_pin1 = %b | real E_pin2 = %b | real E_pin3 = %b | real E_pin4 = %b | ",Data_DSP_prev,E_pin1_prev,E_pin2_prev,E_pin3_prev,E_pin4_prev);
`endif
	if (
		( Data_DSP_expected_prev[0] !== 1'bx ) && ( Data_DSP_prev[0] !== Data_DSP_expected_prev[0] )
		&& ((Data_DSP_expected_prev[0] !== last_Data_DSP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[0] = Data_DSP_expected_prev[0];
	end
	if (
		( Data_DSP_expected_prev[1] !== 1'bx ) && ( Data_DSP_prev[1] !== Data_DSP_expected_prev[1] )
		&& ((Data_DSP_expected_prev[1] !== last_Data_DSP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[1] = Data_DSP_expected_prev[1];
	end
	if (
		( Data_DSP_expected_prev[2] !== 1'bx ) && ( Data_DSP_prev[2] !== Data_DSP_expected_prev[2] )
		&& ((Data_DSP_expected_prev[2] !== last_Data_DSP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[2] = Data_DSP_expected_prev[2];
	end
	if (
		( Data_DSP_expected_prev[3] !== 1'bx ) && ( Data_DSP_prev[3] !== Data_DSP_expected_prev[3] )
		&& ((Data_DSP_expected_prev[3] !== last_Data_DSP_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[3] = Data_DSP_expected_prev[3];
	end
	if (
		( Data_DSP_expected_prev[4] !== 1'bx ) && ( Data_DSP_prev[4] !== Data_DSP_expected_prev[4] )
		&& ((Data_DSP_expected_prev[4] !== last_Data_DSP_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[4] = Data_DSP_expected_prev[4];
	end
	if (
		( Data_DSP_expected_prev[5] !== 1'bx ) && ( Data_DSP_prev[5] !== Data_DSP_expected_prev[5] )
		&& ((Data_DSP_expected_prev[5] !== last_Data_DSP_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[5] = Data_DSP_expected_prev[5];
	end
	if (
		( Data_DSP_expected_prev[6] !== 1'bx ) && ( Data_DSP_prev[6] !== Data_DSP_expected_prev[6] )
		&& ((Data_DSP_expected_prev[6] !== last_Data_DSP_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[6] = Data_DSP_expected_prev[6];
	end
	if (
		( Data_DSP_expected_prev[7] !== 1'bx ) && ( Data_DSP_prev[7] !== Data_DSP_expected_prev[7] )
		&& ((Data_DSP_expected_prev[7] !== last_Data_DSP_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_DSP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_DSP_expected_prev);
		$display ("     Real value = %b", Data_DSP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Data_DSP_exp[7] = Data_DSP_expected_prev[7];
	end
	if (
		( E_pin1_expected_prev !== 1'bx ) && ( E_pin1_prev !== E_pin1_expected_prev )
		&& ((E_pin1_expected_prev !== last_E_pin1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_pin1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_pin1_expected_prev);
		$display ("     Real value = %b", E_pin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_pin1_exp = E_pin1_expected_prev;
	end
	if (
		( E_pin2_expected_prev !== 1'bx ) && ( E_pin2_prev !== E_pin2_expected_prev )
		&& ((E_pin2_expected_prev !== last_E_pin2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_pin2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_pin2_expected_prev);
		$display ("     Real value = %b", E_pin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_pin2_exp = E_pin2_expected_prev;
	end
	if (
		( E_pin3_expected_prev !== 1'bx ) && ( E_pin3_prev !== E_pin3_expected_prev )
		&& ((E_pin3_expected_prev !== last_E_pin3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_pin3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_pin3_expected_prev);
		$display ("     Real value = %b", E_pin3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_E_pin3_exp = E_pin3_expected_prev;
	end
	if (
		( E_pin4_expected_prev !== 1'bx ) && ( E_pin4_prev !== E_pin4_expected_prev )
		&& ((E_pin4_expected_prev !== last_E_pin4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_pin4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_pin4_expected_prev);
		$display ("     Real value = %b", E_pin4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_E_pin4_exp = E_pin4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module clockTopLever_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD;
reg C_RESET;
reg clk_50MHZ;
reg SET_MODE;
// wires                                               
wire [7:0] Data_DSP;
wire E_pin1;
wire E_pin2;
wire E_pin3;
wire E_pin4;

wire sampler;                             

// assign statements (if any)                          
clockTopLever i1 (
// port map - connection between master ports and signals/registers   
	.ADD(ADD),
	.C_RESET(C_RESET),
	.clk_50MHZ(clk_50MHZ),
	.Data_DSP(Data_DSP),
	.E_pin1(E_pin1),
	.E_pin2(E_pin2),
	.E_pin3(E_pin3),
	.E_pin4(E_pin4),
	.SET_MODE(SET_MODE)
);

// ADD
always
begin
	ADD = 1'b0;
	ADD = #50000 1'b1;
	#50000;
end 

// C_RESET
initial
begin
	C_RESET = 1'b0;
	C_RESET = #20000 1'b1;
end 

// clk_50MHZ
always
begin
	clk_50MHZ = 1'b0;
	clk_50MHZ = #10000 1'b1;
	#10000;
end 

// SET_MODE
always
begin
	SET_MODE = 1'b0;
	SET_MODE = #100000 1'b1;
	#100000;
end 

clockTopLever_vlg_sample_tst tb_sample (
	.ADD(ADD),
	.C_RESET(C_RESET),
	.clk_50MHZ(clk_50MHZ),
	.SET_MODE(SET_MODE),
	.sampler_tx(sampler)
);

clockTopLever_vlg_check_tst tb_out(
	.Data_DSP(Data_DSP),
	.E_pin1(E_pin1),
	.E_pin2(E_pin2),
	.E_pin3(E_pin3),
	.E_pin4(E_pin4),
	.sampler_rx(sampler)
);
endmodule

